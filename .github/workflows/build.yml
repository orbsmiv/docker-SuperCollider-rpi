on:
  schedule:
    - cron: "0 */4 * * *"
  pull_request:
    branches:
      - master
  
name: Docker Build
jobs:
  latest-version:
    name: Get Latest Release
    runs-on: ubuntu-18.04
    outputs:
      latest_image_timestamp: ${{ steps.latest_image_timestamp.outputs.timestamp }}
      latest_sc_release_timestamp: ${{ steps.latest_sc_release.outputs.latest_tag_published_at }}
      latest_sc_release_name: ${{ steps.latest_sc_release.outputs.latest_tag }}
      latest_plugs_release_timestamp: ${{ steps.latest_plugs_release.outputs.latest_tag_published_at }}
      latest_plugs_release_name: ${{ steps.latest_plugs_release.outputs.latest_tag }}
    steps:
    - name: Get the timestamp of the latest image on Docker Hub
      id: latest_image_timestamp
      run: |
        echo "::set-output name=timestamp::$(curl -L --silent https://registry.hub.docker.com/v2/repositories/orbsmiv/supercollider-rpi/tags/latest | python3 -c "import sys, json; print(json.load(sys.stdin)['last_updated'])")"
    - name: Get Latest SuperCollider
      id: latest_sc_release
      env:
        OWNER: supercollider
        REPO: supercollider
      run: |
        release_json=$(curl -L --silent https://api.github.com/repos/${OWNER}/${REPO}/releases/latest)
        echo "::set-output name=latest_tag::$(echo ${release_json} | python3 -c "import sys, json; print(json.load(sys.stdin)['tag_name'])")"
        echo "::set-output name=latest_tag_published_at::$(echo ${release_json} | python3 -c "import sys, json; print(json.load(sys.stdin)['published_at'])")"
    - name: Get Latest SC Plugins
      id: latest_plugs_release
      env:
        OWNER: supercollider
        REPO: sc3-plugins
      run: |
        release_json=$(curl -L --silent https://api.github.com/repos/${OWNER}/${REPO}/releases/latest)
        echo "::set-output name=latest_tag::$(echo ${release_json} | python3 -c "import sys, json; print(json.load(sys.stdin)['tag_name'])")"
        echo "::set-output name=latest_tag_published_at::$(echo ${release_json} | python3 -c "import sys, json; print(json.load(sys.stdin)['published_at'])")"
    - name: Print version info
      run: |
        echo "SuperCollider info: Tag=${{steps.latest_sc_release.outputs.latest_tag}}, Timestamp=${{steps.latest_sc_release.outputs.latest_tag_published_at}}"
        echo "SC3 Plugs info: Tag=${{steps.latest_plugs_release.outputs.latest_tag}}, Timestamp=${{steps.latest_plugs_release.outputs.latest_tag_published_at}}"
        echo "Docker Hub info: Timestamp=${{steps.latest_image_timestamp.outputs.timestamp}}"


  docker_buildx:
    runs-on: ubuntu-18.04
    needs: latest-version
    if: github.event_name == 'pull_request' || needs.latest-version.outputs.latest_sc_release_timestamp > needs.latest-version.outputs.latest_image_timestamp || needs.latest-version.outputs.latest_plugs_release_timestamp > needs.latest-version.outputs.latest_image_timestamp
    steps:
      - name: Print version info
        run: |
          echo "SuperCollider info: Tag=${{needs.latest-version.outputs.latest_sc_release_name}}, Timestamp=${{needs.latest-version.outputs.latest_sc_release_timestamp}}"
          echo "SC3 Plugs info: Tag=${{needs.latest-version.outputs.latest_plugs_release_name}}, Timestamp=${{needs.latest-version.outputs.latest_plugs_release_timestamp}}"
          echo "Docker Hub info: Timestamp=${{needs.latest-version.outputs.latest_image_timestamp}}"

      - name: New SuperCollider release notification
        if: needs.latest-version.outputs.latest_sc_release_timestamp > needs.latest-version.outputs.latest_image_timestamp
        run: |
          echo "SuperCollider ${{ needs.latest-version.outputs.latest_sc_release_name }} was released at ${{ needs.latest-version.outputs.latest_sc_release_timestamp }}"
          echo "Latest tag published to Docker Hub at ${{ needs.latest-version.outputs.latest_image_timestamp }}"
          echo "Release is newer than latest hub image. Build required."

      - name: New SC3-Plugins release notification
        if: needs.latest-version.outputs.latest_plugs_release_timestamp > needs.latest-version.outputs.latest_image_timestamp
        run: |
          echo "SC Plugins ${{ needs.latest-version.outputs.latest_plugs_release_name }} was released at ${{ needs.latest-version.outputs.latest_plugs_release_timestamp }}"
          echo "Latest tag published to Docker Hub at ${{ needs.latest-version.outputs.latest_image_timestamp }}"
          echo "Release is newer than latest hub image. Build required."

      - name: Prepare
        id: prepare
        run: |
          echo ::set-output name=docker_platforms::linux/arm/v6,linux/arm/v7,linux/arm64
          echo ::set-output name=docker_username::orbsmiv
          echo ::set-output name=docker_image_testing::orbsmiv/testing
          echo ::set-output name=docker_image::orbsmiv/supercollider-rpi
          sc_tag=$(sed -n "s/Version-\(.*\)/\1/p" <<< ${{ needs.latest-version.outputs.latest_sc_release_name }})
          sc_plugs_tag=$(sed -n "s/Version-\(.*\)/\1/p" <<< ${{ needs.latest-version.outputs.latest_plugs_release_name }})
          echo ::set-output name=tag_name::${sc_tag}-sc3plugs-${sc_plugs_tag}

      - uses: actions/checkout@v2

      - name: Set up Docker Buildx
        id: buildx
        uses: crazy-max/ghaction-docker-buildx@v1.6.1
        with:
          buildx-version: latest
          qemu-version: latest

      - name: Available platforms and refs info
        run: |
          echo ${{ steps.buildx.outputs.platforms }}
          echo "We're building on the ${{ github.ref }} branch"

      - name: Run Buildx (no push-to-hub)
        run: |
          docker buildx build \
          --platform ${{ steps.prepare.outputs.docker_platforms }} \
          --output "type=image,push=false" \
          --build-arg "SC_VERSION=${{ needs.latest-version.outputs.latest_sc_release_name }}" \
          --build-arg "SC_PLUG_VERSION=${{ needs.latest-version.outputs.latest_plugs_release_name }}" \
          --tag ${{ steps.prepare.outputs.docker_image }}:${{ steps.prepare.outputs.tag_name }} \
          --tag ${{ steps.prepare.outputs.docker_image }}:latest \
          --file ./Dockerfile \
          .

      - name: Docker Login
        if: success()
        env:
          DOCKER_TOKEN: ${{ secrets.DOCKER_TOKEN }}
        run: |
          echo "${DOCKER_TOKEN}" | docker login --username "${{ steps.prepare.outputs.docker_username }}" --password-stdin

      - name: Run Buildx (with push)
        if: success() && github.ref == 'refs/heads/master'
        run: |
          docker buildx build \
          --platform ${{ steps.prepare.outputs.docker_platforms }} \
          --output "type=image,push=true" \
          --build-arg "SC_VERSION=${{ needs.latest-version.outputs.latest_sc_release_name }}" \
          --build-arg "SC_PLUG_VERSION=${{ needs.latest-version.outputs.latest_plugs_release_name }}" \
          --tag ${{ steps.prepare.outputs.docker_image }}:${{ steps.prepare.outputs.tag_name }} \
          --tag ${{ steps.prepare.outputs.docker_image }}:latest \
          --file ./Dockerfile \
          .
          
      - name: Push pull request build to testing Docker Hub repo
        if: success() && github.event_name == 'pull_request'
        run: |
          docker buildx build \
          --platform ${{ steps.prepare.outputs.docker_platforms }} \
          --output "type=image,push=true" \
          --build-arg "SC_VERSION=${{ needs.latest-version.outputs.latest_sc_release_name }}" \
          --build-arg "SC_PLUG_VERSION=${{ needs.latest-version.outputs.latest_plugs_release_name }}" \
          --tag ${{ steps.prepare.outputs.docker_image_testing }}:supercollider-rpi-${{ steps.prepare.outputs.tag_name }}-$(date +'%s') \
          --file ./Dockerfile \
          .
